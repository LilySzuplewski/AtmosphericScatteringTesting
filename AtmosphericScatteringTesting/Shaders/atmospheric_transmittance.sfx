#include "shader_platform.sl"
#include "common.sl"
#include "sampler_states.sl"
#include "render_states.sl"
#include "atmospheric_transmittance_constants.sl"
#include "atmospheric_testing.sl"

uniform Texture2D	g_Transmittance :	register(t0);

float GetLayerDensity(float exp_term, float exp_scale, float linear_term, float constant_term, float altitude)
{
	float density = exp_term * exp(exp_scale * altitude) + linear_term * altitude + constant_term;
	return clamp(density, 0.f, 1.f);
}


float DistanceToTopAtmosphereBoundary(float r, float mu) {
	//assert(r <= g_topRadius);
	//assert(mu >= -1.0 && mu <= 1.0);

	float discriminant = r * r * (mu * mu - 1.0) + (g_topRadius * g_topRadius);
	return ClampDistance(-r * mu + sqrt(discriminant));
}

float DistanceToBottomAtmosphereBoundary(float r, float mu) {
	//assert(r >= atmosphere.bottom_radius);
	//assert(mu >= -1.0 && mu <= 1.0);
	float discriminant = r * r * (mu * mu - 1.0) + (g_bottomRadius * g_bottomRadius);
	return ClampDistance(-r * mu - sqrt(discriminant));
}

float DistanceToNearestAtmosphereBoundary(float r, float mu, bool ray_r_mu_intersects_ground) {
	if (ray_r_mu_intersects_ground) {
		return DistanceToBottomAtmosphereBoundary(r, mu);
	}
	else {
		return DistanceToTopAtmosphereBoundary(r, mu);
	}
}



vec2 GetRMuFromTransmittanceTextureUv(vec2 uv) {
	//assert(uv.x >= 0.0 && uv.x <= 1.0);
	//assert(uv.y >= 0.0 && uv.y <= 1.0);
	float r, mu;

	float x_r = GetUnitRangeFromTextureCoord(uv.y, 256);
	float x_mu = GetUnitRangeFromTextureCoord(uv.x, 256);
	// Distance to top atmosphere boundary for a horizontal ray at ground level.
	float H = sqrt(g_topRadius * g_topRadius - g_bottomRadius * g_bottomRadius);
	// Distance to the horizon, from which we can compute r:
	float rho = H * x_r;
	r = sqrt(rho * rho + g_bottomRadius * g_bottomRadius);// (x_r * (g_topRadius - g_bottomRadius)) + g_bottomRadius;//
	// Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
	// and maximum values over all mu - obtained for (r,1) and (r,mu_horizon) -
	// 
	// from which we can recover mu:
	float d_min = g_topRadius - r;
	float d_max = rho + H;
	float d = d_min + x_mu * (d_max - d_min);
	mu = d == 0.0 ? float(1.0) : (H * H - rho * rho - d * d) / (2.0 * r * d);
	mu = ClampCosine(mu);

	return vec2(r, mu);
}

vec2 GetTransmittanceTextureUvFromRMu(float r, float mu)
{
	//assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
	//assert(mu >= -1.0 && mu <= 1.0);
	// Distance to top atmosphere boundary for a horizontal ray at ground level.
	float H = sqrt(g_topRadius * g_topRadius - g_bottomRadius * g_bottomRadius);
	// Distance to the horizon.
	float rho = sqrt(r * r - g_bottomRadius * g_bottomRadius);
	// Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
	// and maximum values over all mu - obtained for (r,1) and (r,mu_horizon).
	float d = DistanceToTopAtmosphereBoundary(r, mu);
	float d_min = g_topRadius - r;
	float d_max = rho + H;
	float x_mu = (d - d_min) / (d_max - d_min);
	float x_r = rho / H;//(r - g_bottomRadius) / (g_topRadius - g_bottomRadius);//
	return vec2(x_mu, x_r);
}

vec3 ComputeTransmittanceToTopAtmosphereBoundary( float r, float mu) 
{
	//assert(r >= g_bottomRadius && r <= g_topRadius);
	//assert(mu >= -1.0 && mu <= 1.0);

	// Number of intervals for the numerical integration.
	const int SAMPLE_COUNT = 500;
	// The integration step, i.e. the length of each integration interval.
	float dx = DistanceToTopAtmosphereBoundary(r, mu) / float(SAMPLE_COUNT);

	// Integration loop.
	float rayleighResult = 0.0;
	float mieResult = 0.0;
	float absorptionResult = 0.0;
	for(int i = 0; i <= SAMPLE_COUNT; ++i) {
		float d_i = float(i) * dx;
		// Distance between the current sample point and the planet center.
		float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
		// Sample weight (from the trapezoidal rule).
		float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;

		// Number density at the current sample point (divided by the number density
		// at the bottom of the atmosphere, yielding a dimensionless number).
		rayleighResult = GetLayerDensity(g_rayleighExpTerm, g_rayleighExpScale, g_rayleighLinearTerm, g_rayleighConstantTerm, r_i - g_bottomRadius) * weight_i * dx;
		mieResult = GetLayerDensity(g_mieExpTerm, g_mieExpScale, g_mieLinearTerm, g_mieConstantTerm, r_i - g_bottomRadius) * weight_i * dx;
		absorptionResult = GetLayerDensity(g_absorptionExpTerm, g_absorptionExpScale, g_absorptionLinearTerm, g_absorptionConstantTerm, r_i - g_bottomRadius) * weight_i * dx;
	}

	
	return exp(-(
		g_rayleighScattering * rayleighResult +
		g_mieExtinction * mieResult +
		g_absorptionExtinction * absorptionResult));
}


shader vec4 PS_FlatColour(posTexVertexOutput IN) : SV_TARGET
{
	return vec4(1.0,0.0,0.0,0.0);
}

shader vec4 PS_PrecomputeTransmittance(posTexVertexOutput IN) : SV_TARGET
{
	vec2 RMu = GetRMuFromTransmittanceTextureUv(IN.texCoords);
	vec3 transmittance = (pow(ComputeTransmittanceToTopAtmosphereBoundary(RMu.x, RMu.y), 1));
	return vec4(transmittance, 0.0);
}

shader vec4 PS_TransmittanceTest(posTexVertexOutput IN) : SV_TARGET
{
	float r = 6360000.0;
	
	float d = 1.0;
	
	vec2 centerCoordinates = vec2((IN.texCoords.x * 2.0) - 1.0, (IN.texCoords.y * 2.0) - 1.0);

	float mu = sqrt(centerCoordinates.x * centerCoordinates.x + centerCoordinates.y * centerCoordinates.y);

	if (mu > 1.0)
		return vec4(0.0, 0.0, 0.0, 0.0);

	float r_d = ClampRadius(sqrt(d * d + 2.0 * r * mu * d + r * r));
	float mu_d = ClampCosine((r * mu + d) / r_d);

	//return vec4(mu, 0.0, 0.0, 0.0);
	vec4 result = g_Transmittance.Sample(clampSamplerState, GetTransmittanceTextureUvFromRMu(r_d, mu_d));

	//return vec4(GetTransmittanceTextureUvFromRMu(r, mu), 0.0, 0.0);

	//vec4 result = g_Transmittance.Sample(clampSamplerState, vec2(GetTransmittanceTextureUvFromRMu(r, mu).x,mu));
	return vec4(1.0 - result.x, 1.0 - result.y, 1.0 - result.z, 1.0);
}

technique flat_colour
{
	pass main
	{
		SetRasterizerState(RenderBackfaceCull);
		SetDepthStencilState(ReverseDepth, 0);
		SetBlendState(DontBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen));
		SetPixelShader(CompileShader(ps_5_0, PS_FlatColour));
	}
}

technique visualise_transmittance
{
	pass main
	{
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(ReverseDepth, 0);
		SetBlendState(NoBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen));
		SetPixelShader(CompileShader(ps_5_0, PS_TransmittanceTest));
	}
}


technique precompute_transmittance
{
	pass main
	{
		SetRasterizerState(RenderBackfaceCull);
		SetDepthStencilState(ReverseDepth, 0);
		SetBlendState(DontBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen));
		SetPixelShader(CompileShader(ps_5_0, PS_PrecomputeTransmittance));
	}
}